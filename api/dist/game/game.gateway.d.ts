import { OnModuleInit } from '@nestjs/common';
import { OnGatewayDisconnect, OnGatewayConnection } from '@nestjs/websockets';
import { createGameDTO } from './dto/createGameDTO';
import { UserService } from './../user/user.service';
import { AuthService } from './../auth/auth.service';
import { GameService } from './game.service';
import { Server, Socket } from 'socket.io';
import { ConnectedPlayerService } from './connected-player.service';
import { GameI } from './interfaces/game.interface';
import { JoinedGameService } from './joined-game.service';
export declare class GameGateway implements OnModuleInit, OnGatewayConnection, OnGatewayDisconnect {
    private gameService;
    private readonly authService;
    private userService;
    private connectedPlayerService;
    private joinedGameService;
    server: Server;
    idMax: number;
    games: Map<number, GameI>;
    queue: any[];
    gameHeight: number;
    gameWidth: number;
    padStep: number;
    halfGameHeight: number;
    halfGameWidth: number;
    ballRadius: number;
    paddleHeight: number;
    paddleWidth: number;
    paddleOffset: number;
    basePaddleY: number;
    basePaddle2X: number;
    baseVelocityX: number;
    baseVelocityY: number;
    constructor(gameService: GameService, authService: AuthService, userService: UserService, connectedPlayerService: ConnectedPlayerService, joinedGameService: JoinedGameService);
    onModuleInit(): Promise<void>;
    handleConnection(socket: Socket): Promise<boolean | void>;
    handleDisconnect(socket: Socket): Promise<void>;
    private updatePadPosition;
    onMovePad(socket: Socket, event: {
        gameId: number;
        move: number;
    }): Promise<void>;
    onCreateGame(socket: Socket, createGame: createGameDTO): Promise<void>;
    private getGames;
    private playerIsAlreadyInAGame;
    onJoinGame(socket: Socket, gameId: number): Promise<void>;
    onLeaveGame(socket: Socket, gameId: number): Promise<void>;
    onGameInfos(socket: Socket, gameId: number): Promise<void>;
    private terminateGame;
    private disconnect;
    closeGame(game: GameI): Promise<void>;
    startGame(game: GameI): Promise<void>;
}
