import { createRoomDTO } from './dto/createRoomDTO';
import { RoomUserDTO } from './dto/RoomUserDTO';
import { MuteUserDTO } from './dto/MuteUserDTO';
import { MessageDTO } from './dto/MessageDTO';
import { OnModuleInit } from "@nestjs/common";
import { OnGatewayConnection, OnGatewayDisconnect } from "@nestjs/websockets";
import { JoinedRoomService } from './joined-room.service';
import { MessageService } from './message.service';
import { ConnectedUserService } from './connected-user.service';
import { RoomService } from './room.service';
import { UserService } from '../user/user.service';
import { AuthService } from './../auth/auth.service';
import { Server, Socket } from "socket.io";
import { RoomI } from './interfaces/room.interface';
import { RoomEntity } from './entities/room.entity';
import { UpdateAdminDTO } from './dto/UpdateAdminDTO';
export declare class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect, OnModuleInit {
    private authService;
    private userService;
    private roomService;
    private connectedUserService;
    private messageService;
    private joinedRoomService;
    server: Server;
    constructor(authService: AuthService, userService: UserService, roomService: RoomService, connectedUserService: ConnectedUserService, messageService: MessageService, joinedRoomService: JoinedRoomService);
    onModuleInit(): Promise<void>;
    handleConnection(socket: Socket): Promise<boolean | void>;
    handleDisconnect(socket: Socket): Promise<void>;
    onCreateRoom(socket: Socket, createRoom: createRoomDTO): Promise<void>;
    onChangePassword(socket: Socket, room: RoomI): Promise<void>;
    inviteToPrivateRoom(socket: Socket, inviteUser: RoomUserDTO): Promise<void>;
    onJoinRoom(socket: Socket, room: RoomI): Promise<void>;
    onBanRoom(socket: Socket, banUser: RoomUserDTO): Promise<void>;
    onunBanRoom(socket: Socket, unbanUser: RoomUserDTO): Promise<void>;
    onMuteUser(socket: Socket, muteUser: MuteUserDTO): Promise<void>;
    onLeaveRoom(socket: Socket): Promise<void>;
    onUnjoinRoom(socket: Socket, room: RoomI): Promise<void>;
    onAddMessage(socket: Socket, message: MessageDTO): Promise<void>;
    onDeleteRoom(socket: Socket, roomId: number): Promise<void>;
    private disconnect;
    onUpdateAdmin(socket: Socket, updateAdmin: UpdateAdminDTO): Promise<void>;
    getAllRooms(): Promise<RoomEntity[]>;
}
